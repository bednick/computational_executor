## Test
## Проверка работоспособности препроцессора

## Строки начинающиеся с '##' считаются комментариями
## Так-же допускаются пустые строки

## Строки начинающиеся с '#' считаются спец. строками. Например:

##    Обозначение версии синтаксиса:
#version 1.0


##    Подстановки:(DEFINE)
#define MY_NAME example_file

## Для подстановки defin'а используется синтаксис:
## %{[define][<name_define>]} например:
## ;%{[define][MY_NAME]}; echo "qwe1" >> %{[define][MY_NAME]}
## или например:

;%{[define][MY_NAME]}.txt; echo "qwe2" >> %{[define][MY_NAME]}.txt


##    Циклы:(FOR)
## цикл начинается со строки:
## #for <name_for> #in <<перечисление>>:
## Для подстановки элемента for'а используется синтаксис:
## %{[for][<name_for>]}
## цикл завершается строкой #endfor

## #for I #in in_1,in_2,in_3:
## %{[for][I]}; out; echo "%{[for][I]}" >> out
## #endfor


##    Импорт: (INCLUDE)
## --не реализованно--
## Разрешено использовать только во сходных состояниях команды
## %([include][name_example][name_state][args...])
## Подключение файла example.cm
#include <example>

%{[include][example][out ] [ PATH=./example][ PATH2=./example2]};out_include;echo 'include' >> out_include

## Строки ВМ образуются следующим образом:
## <<Входные состояния, перечисленные через ','>>;<<выходные состояния, перечисленные через ','>>;<команда> # метки


## #for I #in in_1,in_2,in_3:
## ; %{[for][I]}; echo "%{[for][I]}" >> out
## in_4, in_5, %{[for][I]}; out_1, out_2; echo "%{[for][I]}" >> out
## #endfor
